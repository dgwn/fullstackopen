{"ast":null,"code":"var _jsxFileName = \"/Users/danielgawne/Documents/projects/fullstackopen/part5/src/components/Togglable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useImperativeHandle } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport PropTypes from \"prop-types\";\nconst Togglable = /*#__PURE__*/React.forwardRef(_c = _s((props, ref) => {\n  _s();\n\n  const [visible, setVisible] = useState(false);\n  const hideWhenVisible = {\n    display: visible ? \"none\" : \"\"\n  };\n  const showWhenVisible = {\n    display: visible ? \"\" : \"none\"\n  };\n\n  const toggleVisibility = () => {\n    setVisible(!visible);\n  };\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    };\n  });\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"div\", {\n    style: hideWhenVisible\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    onClick: toggleVisibility,\n    color: \"default\",\n    type: \"submit\",\n    style: {\n      marginTop: 10\n    }\n  }, props.buttonLabel)), /*#__PURE__*/React.createElement(\"div\", {\n    style: showWhenVisible,\n    className: \"togglableContent\"\n  }, props.children, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    onClick: toggleVisibility,\n    color: \"default\",\n    style: {\n      marginTop: 10\n    }\n  }, \"Cancel\")));\n}, \"7Y5lBLdF9mkfoiy3F9Lk5HPUzvA=\", false, function () {\n  return [useImperativeHandle];\n}));\n_c2 = Togglable;\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired\n};\nTogglable.displayName = \"Togglable\";\nexport default Togglable;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Togglable$React.forwardRef\");\n$RefreshReg$(_c2, \"Togglable\");","map":{"version":3,"sources":["/Users/danielgawne/Documents/projects/fullstackopen/part5/src/components/Togglable.js"],"names":["React","useState","useImperativeHandle","Button","PropTypes","Togglable","forwardRef","props","ref","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","marginTop","buttonLabel","children","propTypes","string","isRequired","displayName"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,mBAA1B,QAAqD,OAArD;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,MAAMC,SAAS,gBAAGL,KAAK,CAACM,UAAN,SAAiB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAAA;;AACjD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAMU,eAAe,GAAG;AAAEC,IAAAA,OAAO,EAAEH,OAAO,GAAG,MAAH,GAAY;AAA9B,GAAxB;AACA,QAAMI,eAAe,GAAG;AAAED,IAAAA,OAAO,EAAEH,OAAO,GAAG,EAAH,GAAQ;AAA1B,GAAxB;;AAEA,QAAMK,gBAAgB,GAAG,MAAM;AAC7BJ,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,GAFD;;AAIAP,EAAAA,mBAAmB,CAACM,GAAD,EAAM,MAAM;AAC7B,WAAO;AACLM,MAAAA;AADK,KAAP;AAGD,GAJkB,CAAnB;AAMA,sBACE,8CACE;AAAK,IAAA,KAAK,EAAEH;AAAZ,kBACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAC,WADV;AAEE,IAAA,OAAO,EAAEG,gBAFX;AAGE,IAAA,KAAK,EAAC,SAHR;AAIE,IAAA,IAAI,EAAC,QAJP;AAKE,IAAA,KAAK,EAAE;AAAEC,MAAAA,SAAS,EAAE;AAAb;AALT,KAOGR,KAAK,CAACS,WAPT,CADF,CADF,eAYE;AAAK,IAAA,KAAK,EAAEH,eAAZ;AAA6B,IAAA,SAAS,EAAC;AAAvC,KACGN,KAAK,CAACU,QADT,eAEE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAC,WADV;AAEE,IAAA,OAAO,EAAEH,gBAFX;AAGE,IAAA,KAAK,EAAC,SAHR;AAIE,IAAA,KAAK,EAAE;AAAEC,MAAAA,SAAS,EAAE;AAAb;AAJT,cAFF,CAZF,CADF;AA0BD,CA1CiB;AAAA,UAUhBb,mBAVgB;AAAA,GAAlB;MAAMG,S;AA4CNA,SAAS,CAACa,SAAV,GAAsB;AACpBF,EAAAA,WAAW,EAAEZ,SAAS,CAACe,MAAV,CAAiBC;AADV,CAAtB;AAIAf,SAAS,CAACgB,WAAV,GAAwB,WAAxB;AAEA,eAAehB,SAAf","sourcesContent":["import React, { useState, useImperativeHandle } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport PropTypes from \"prop-types\";\n\nconst Togglable = React.forwardRef((props, ref) => {\n  const [visible, setVisible] = useState(false);\n\n  const hideWhenVisible = { display: visible ? \"none\" : \"\" };\n  const showWhenVisible = { display: visible ? \"\" : \"none\" };\n\n  const toggleVisibility = () => {\n    setVisible(!visible);\n  };\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    };\n  });\n\n  return (\n    <div>\n      <div style={hideWhenVisible}>\n        <Button\n          variant=\"contained\"\n          onClick={toggleVisibility}\n          color=\"default\"\n          type=\"submit\"\n          style={{ marginTop: 10 }}\n        >\n          {props.buttonLabel}\n        </Button>\n      </div>\n      <div style={showWhenVisible} className=\"togglableContent\">\n        {props.children}\n        <Button\n          variant=\"contained\"\n          onClick={toggleVisibility}\n          color=\"default\"\n          style={{ marginTop: 10 }}\n        >\n          Cancel\n        </Button>\n      </div>\n    </div>\n  );\n});\n\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired\n};\n\nTogglable.displayName = \"Togglable\";\n\nexport default Togglable;\n"]},"metadata":{},"sourceType":"module"}